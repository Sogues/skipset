// Code generated by go run types_gen.go; DO NOT EDIT.
package skipset

import (
	"sync"
	"sync/atomic"
)

type Float32Set struct {
	header *float32Node
	tail   *float32Node
	length int64
}

type float32Node struct {
	score       float32
	next        []*float32Node
	marked      bool
	fullyLinked bool
	mu          sync.Mutex
}

func newFloat32Node(score float32, level int) *float32Node {
	return &float32Node{
		score:       score,
		next:        make([]*float32Node, level),
		marked:      false,
		fullyLinked: true,
	}
}

// NewFloat32 return a empty float32 skip set.
func NewFloat32() *Float32Set {
	h, t := newFloat32Node(0, maxLevel), newFloat32Node(0, maxLevel)
	for i := 0; i < maxLevel; i++ {
		h.next[i] = t
	}
	return &Float32Set{
		header: h,
		tail:   t,
	}
}

// findNode takes a score and two maximal-height arrays then searches exactly as in a sequential skip-list.
// The returned preds and succs always satisfy preds[i] > score > succs[i].
func (s *Float32Set) findNode(score float32, preds *[maxLevel]*float32Node, succs *[maxLevel]*float32Node) int {
	// lFound represents the index of the first layer at which it found a node.
	lFound, x := -1, s.header
	for i := maxLevel - 1; i >= 0; i-- {
		succ := x.next[i]
		for succ != s.tail && succ.score < score {
			x = succ
			succ = x.next[i]
		}
		preds[i] = x
		succs[i] = succ

		// Check if the score already in the skip list.
		if lFound == -1 && succ != s.tail && score == succ.score {
			lFound = i
		}
	}
	return lFound
}

// findNodeSimple takes a score and two maximal-height arrays then searches exactly as in a sequential skip-set.
// The returned preds and succs always satisfy preds[i] > score > succs[i].
func (s *Float32Set) findNodeSimple(score float32, preds *[maxLevel]*float32Node, succs *[maxLevel]*float32Node) int {
	// lFound represents the index of the first layer at which it found a node.
	x := s.header
	for i := maxLevel - 1; i >= 0; i-- {
		succ := x.next[i]
		for succ != s.tail && succ.score < score {
			x = succ
			succ = x.next[i]
		}
		preds[i] = x
		succs[i] = succ

		// Check if the score already in the skip list.
		if succ != s.tail && score == succ.score {
			return i
		}
	}
	return -1
}

func unlockFloat32(preds [maxLevel]*float32Node, highestLevel int) {
	var prevPred *float32Node
	for i := highestLevel; i >= 0; i-- {
		if preds[i] != prevPred { // the node could be unlocked by previous loop
			preds[i].mu.Unlock()
			prevPred = preds[i]
		}
	}
}

// Insert insert the score into skip set, return true if this process insert the score into skip set,
// return false if this process can't insert this score, because another process has insert the same score.
//
// If the score is in the skip set but not fully linked, this process will wait until it is.
func (s *Float32Set) Insert(score float32) bool {
	level := randomLevel()
	var preds, succs [maxLevel]*float32Node
	for {
		lFound := s.findNodeSimple(score, &preds, &succs)
		if lFound != -1 { // indicating the score is already in the skip-list
			nodeFound := succs[lFound]
			if !nodeFound.marked {
				for !nodeFound.fullyLinked {
					// The node is not yet fully linked, just waits until it is.
				}
				return false
			}
			// If the node is marked, represents some other thread is in the process of deleting this node,
			// we need to add this node in next loop.
			continue
		}

		// Add this node into skip list.
		var (
			highestLocked        = -1 // the highest level being locked by this process
			valid                = true
			pred, succ, prevPred *float32Node
		)
		for layer := 0; valid && layer < level; layer++ {
			pred = preds[layer]   // target node's previous node
			succ = succs[layer]   // target node's next node
			if pred != prevPred { // the node in this layer could be locked by previous loop
				pred.mu.Lock()
				highestLocked = layer
				prevPred = pred
			}
			// valid check if there is another node has inserted into the skip list in this layer during this process.
			// It is valid if:
			// 1. The previous node and next node both are not marked.
			// 2. The previous node's next node is succ in this layer.
			valid = !pred.marked && !succ.marked && pred.next[layer] == succ
		}
		if !valid {
			unlockFloat32(preds, highestLocked)
			continue
		}

		nn := newFloat32Node(score, level)
		for i := 0; i < level; i++ {
			nn.next[i] = succs[i]
			preds[i].next[i] = nn
		}
		nn.fullyLinked = true
		unlockFloat32(preds, highestLocked)
		atomic.AddInt64(&s.length, 1)
		return true
	}
}

// Contains check if the score is in the skip set.
func (s *Float32Set) Contains(score float32) bool {
	x := s.header
	for i := maxLevel - 1; i >= 0; i-- {
		for x.next[i] != s.tail && x.next[i].score < score {
			x = x.next[i]
		}

		// Check if the score already in the skip list.
		if x.next[i] != s.tail && score == x.next[i].score {
			return x.next[i].fullyLinked && !x.next[i].marked
		}
	}
	return false
}

// Delete a node from the skip set.
func (s *Float32Set) Delete(score float32) bool {
	var (
		nodeToDelete *float32Node
		isMarked     bool // represents if this operation mark the node
		topLayer     = -1
		preds, succs [maxLevel]*float32Node
	)
	for {
		lFound := s.findNode(score, &preds, &succs)
		if isMarked || // this process mark this node or we can find this node in the skip list
			lFound != -1 && succs[lFound].fullyLinked && !succs[lFound].marked && (len(succs[lFound].next)-1) == lFound {
			if !isMarked { // we don't mark this node for now
				nodeToDelete = succs[lFound]
				topLayer = lFound
				nodeToDelete.mu.Lock()
				if nodeToDelete.marked {
					// The node is marked by another process,
					// the physical deletion will be accomplished by another process.
					nodeToDelete.mu.Unlock()
					return false
				}
				nodeToDelete.marked = true
				isMarked = true
			}
			// Accomplish the physical deletion.
			var (
				highestLocked        = -1 // the highest level being locked by this process
				valid                = true
				pred, succ, prevPred *float32Node
			)
			for layer := 0; valid && (layer <= topLayer); layer++ {
				pred, succ = preds[layer], succs[layer]
				if pred != prevPred { // the node in this layer could be locked by previous loop
					pred.mu.Lock()
					highestLocked = layer
					prevPred = pred
				}
				// valid check if there is another node has inserted into the skip list in this layer
				// during this process, or the previous is deleted by another process.
				// It is valid if:
				// 1. the previous node exists.
				// 2. no another node has inserted into the skip list in this layer.
				valid = !pred.marked && pred.next[layer] == succ
			}
			if !valid {
				unlockFloat32(preds, highestLocked)
				continue
			}
			for i := topLayer; i >= 0; i-- {
				preds[i].next[i] = nodeToDelete.next[i]
			}
			nodeToDelete.mu.Unlock()
			unlockFloat32(preds, highestLocked)
			atomic.AddInt64(&s.length, -1)
			return true
		}
		return false
	}
}

// Range calls f sequentially for each i and score present in the skip set.
// If f returns false, range stops the iteration.
func (s *Float32Set) Range(f func(i int, score float32) bool) {
	var (
		i int
		x = s.header.next[0]
	)
	for x != s.tail {
		if x.marked || !x.fullyLinked {
			continue
		}
		if !f(i, x.score) {
			break
		}
		x = x.next[0]
		i++
	}
}

// Len return the length of this skip set.
func (s *Float32Set) Len() int {
	return int(s.length)
}

type Float64Set struct {
	header *float64Node
	tail   *float64Node
	length int64
}

type float64Node struct {
	score       float64
	next        []*float64Node
	marked      bool
	fullyLinked bool
	mu          sync.Mutex
}

func newFloat64Node(score float64, level int) *float64Node {
	return &float64Node{
		score:       score,
		next:        make([]*float64Node, level),
		marked:      false,
		fullyLinked: true,
	}
}

// NewFloat64 return a empty float64 skip set.
func NewFloat64() *Float64Set {
	h, t := newFloat64Node(0, maxLevel), newFloat64Node(0, maxLevel)
	for i := 0; i < maxLevel; i++ {
		h.next[i] = t
	}
	return &Float64Set{
		header: h,
		tail:   t,
	}
}

// findNode takes a score and two maximal-height arrays then searches exactly as in a sequential skip-list.
// The returned preds and succs always satisfy preds[i] > score > succs[i].
func (s *Float64Set) findNode(score float64, preds *[maxLevel]*float64Node, succs *[maxLevel]*float64Node) int {
	// lFound represents the index of the first layer at which it found a node.
	lFound, x := -1, s.header
	for i := maxLevel - 1; i >= 0; i-- {
		succ := x.next[i]
		for succ != s.tail && succ.score < score {
			x = succ
			succ = x.next[i]
		}
		preds[i] = x
		succs[i] = succ

		// Check if the score already in the skip list.
		if lFound == -1 && succ != s.tail && score == succ.score {
			lFound = i
		}
	}
	return lFound
}

// findNodeSimple takes a score and two maximal-height arrays then searches exactly as in a sequential skip-set.
// The returned preds and succs always satisfy preds[i] > score > succs[i].
func (s *Float64Set) findNodeSimple(score float64, preds *[maxLevel]*float64Node, succs *[maxLevel]*float64Node) int {
	// lFound represents the index of the first layer at which it found a node.
	x := s.header
	for i := maxLevel - 1; i >= 0; i-- {
		succ := x.next[i]
		for succ != s.tail && succ.score < score {
			x = succ
			succ = x.next[i]
		}
		preds[i] = x
		succs[i] = succ

		// Check if the score already in the skip list.
		if succ != s.tail && score == succ.score {
			return i
		}
	}
	return -1
}

func unlockFloat64(preds [maxLevel]*float64Node, highestLevel int) {
	var prevPred *float64Node
	for i := highestLevel; i >= 0; i-- {
		if preds[i] != prevPred { // the node could be unlocked by previous loop
			preds[i].mu.Unlock()
			prevPred = preds[i]
		}
	}
}

// Insert insert the score into skip set, return true if this process insert the score into skip set,
// return false if this process can't insert this score, because another process has insert the same score.
//
// If the score is in the skip set but not fully linked, this process will wait until it is.
func (s *Float64Set) Insert(score float64) bool {
	level := randomLevel()
	var preds, succs [maxLevel]*float64Node
	for {
		lFound := s.findNodeSimple(score, &preds, &succs)
		if lFound != -1 { // indicating the score is already in the skip-list
			nodeFound := succs[lFound]
			if !nodeFound.marked {
				for !nodeFound.fullyLinked {
					// The node is not yet fully linked, just waits until it is.
				}
				return false
			}
			// If the node is marked, represents some other thread is in the process of deleting this node,
			// we need to add this node in next loop.
			continue
		}

		// Add this node into skip list.
		var (
			highestLocked        = -1 // the highest level being locked by this process
			valid                = true
			pred, succ, prevPred *float64Node
		)
		for layer := 0; valid && layer < level; layer++ {
			pred = preds[layer]   // target node's previous node
			succ = succs[layer]   // target node's next node
			if pred != prevPred { // the node in this layer could be locked by previous loop
				pred.mu.Lock()
				highestLocked = layer
				prevPred = pred
			}
			// valid check if there is another node has inserted into the skip list in this layer during this process.
			// It is valid if:
			// 1. The previous node and next node both are not marked.
			// 2. The previous node's next node is succ in this layer.
			valid = !pred.marked && !succ.marked && pred.next[layer] == succ
		}
		if !valid {
			unlockFloat64(preds, highestLocked)
			continue
		}

		nn := newFloat64Node(score, level)
		for i := 0; i < level; i++ {
			nn.next[i] = succs[i]
			preds[i].next[i] = nn
		}
		nn.fullyLinked = true
		unlockFloat64(preds, highestLocked)
		atomic.AddInt64(&s.length, 1)
		return true
	}
}

// Contains check if the score is in the skip set.
func (s *Float64Set) Contains(score float64) bool {
	x := s.header
	for i := maxLevel - 1; i >= 0; i-- {
		for x.next[i] != s.tail && x.next[i].score < score {
			x = x.next[i]
		}

		// Check if the score already in the skip list.
		if x.next[i] != s.tail && score == x.next[i].score {
			return x.next[i].fullyLinked && !x.next[i].marked
		}
	}
	return false
}

// Delete a node from the skip set.
func (s *Float64Set) Delete(score float64) bool {
	var (
		nodeToDelete *float64Node
		isMarked     bool // represents if this operation mark the node
		topLayer     = -1
		preds, succs [maxLevel]*float64Node
	)
	for {
		lFound := s.findNode(score, &preds, &succs)
		if isMarked || // this process mark this node or we can find this node in the skip list
			lFound != -1 && succs[lFound].fullyLinked && !succs[lFound].marked && (len(succs[lFound].next)-1) == lFound {
			if !isMarked { // we don't mark this node for now
				nodeToDelete = succs[lFound]
				topLayer = lFound
				nodeToDelete.mu.Lock()
				if nodeToDelete.marked {
					// The node is marked by another process,
					// the physical deletion will be accomplished by another process.
					nodeToDelete.mu.Unlock()
					return false
				}
				nodeToDelete.marked = true
				isMarked = true
			}
			// Accomplish the physical deletion.
			var (
				highestLocked        = -1 // the highest level being locked by this process
				valid                = true
				pred, succ, prevPred *float64Node
			)
			for layer := 0; valid && (layer <= topLayer); layer++ {
				pred, succ = preds[layer], succs[layer]
				if pred != prevPred { // the node in this layer could be locked by previous loop
					pred.mu.Lock()
					highestLocked = layer
					prevPred = pred
				}
				// valid check if there is another node has inserted into the skip list in this layer
				// during this process, or the previous is deleted by another process.
				// It is valid if:
				// 1. the previous node exists.
				// 2. no another node has inserted into the skip list in this layer.
				valid = !pred.marked && pred.next[layer] == succ
			}
			if !valid {
				unlockFloat64(preds, highestLocked)
				continue
			}
			for i := topLayer; i >= 0; i-- {
				preds[i].next[i] = nodeToDelete.next[i]
			}
			nodeToDelete.mu.Unlock()
			unlockFloat64(preds, highestLocked)
			atomic.AddInt64(&s.length, -1)
			return true
		}
		return false
	}
}

// Range calls f sequentially for each i and score present in the skip set.
// If f returns false, range stops the iteration.
func (s *Float64Set) Range(f func(i int, score float64) bool) {
	var (
		i int
		x = s.header.next[0]
	)
	for x != s.tail {
		if x.marked || !x.fullyLinked {
			continue
		}
		if !f(i, x.score) {
			break
		}
		x = x.next[0]
		i++
	}
}

// Len return the length of this skip set.
func (s *Float64Set) Len() int {
	return int(s.length)
}

type Int32Set struct {
	header *int32Node
	tail   *int32Node
	length int32
}

type int32Node struct {
	score       int32
	next        []*int32Node
	marked      bool
	fullyLinked bool
	mu          sync.Mutex
}

func newInt32Node(score int32, level int) *int32Node {
	return &int32Node{
		score:       score,
		next:        make([]*int32Node, level),
		marked:      false,
		fullyLinked: true,
	}
}

// NewInt32 return a empty int32 skip set.
func NewInt32() *Int32Set {
	h, t := newInt32Node(0, maxLevel), newInt32Node(0, maxLevel)
	for i := 0; i < maxLevel; i++ {
		h.next[i] = t
	}
	return &Int32Set{
		header: h,
		tail:   t,
	}
}

// findNode takes a score and two maximal-height arrays then searches exactly as in a sequential skip-list.
// The returned preds and succs always satisfy preds[i] > score > succs[i].
func (s *Int32Set) findNode(score int32, preds *[maxLevel]*int32Node, succs *[maxLevel]*int32Node) int {
	// lFound represents the index of the first layer at which it found a node.
	lFound, x := -1, s.header
	for i := maxLevel - 1; i >= 0; i-- {
		succ := x.next[i]
		for succ != s.tail && succ.score < score {
			x = succ
			succ = x.next[i]
		}
		preds[i] = x
		succs[i] = succ

		// Check if the score already in the skip list.
		if lFound == -1 && succ != s.tail && score == succ.score {
			lFound = i
		}
	}
	return lFound
}

// findNodeSimple takes a score and two maximal-height arrays then searches exactly as in a sequential skip-set.
// The returned preds and succs always satisfy preds[i] > score > succs[i].
func (s *Int32Set) findNodeSimple(score int32, preds *[maxLevel]*int32Node, succs *[maxLevel]*int32Node) int {
	// lFound represents the index of the first layer at which it found a node.
	x := s.header
	for i := maxLevel - 1; i >= 0; i-- {
		succ := x.next[i]
		for succ != s.tail && succ.score < score {
			x = succ
			succ = x.next[i]
		}
		preds[i] = x
		succs[i] = succ

		// Check if the score already in the skip list.
		if succ != s.tail && score == succ.score {
			return i
		}
	}
	return -1
}

func unlockInt32(preds [maxLevel]*int32Node, highestLevel int) {
	var prevPred *int32Node
	for i := highestLevel; i >= 0; i-- {
		if preds[i] != prevPred { // the node could be unlocked by previous loop
			preds[i].mu.Unlock()
			prevPred = preds[i]
		}
	}
}

// Insert insert the score into skip set, return true if this process insert the score into skip set,
// return false if this process can't insert this score, because another process has insert the same score.
//
// If the score is in the skip set but not fully linked, this process will wait until it is.
func (s *Int32Set) Insert(score int32) bool {
	level := randomLevel()
	var preds, succs [maxLevel]*int32Node
	for {
		lFound := s.findNodeSimple(score, &preds, &succs)
		if lFound != -1 { // indicating the score is already in the skip-list
			nodeFound := succs[lFound]
			if !nodeFound.marked {
				for !nodeFound.fullyLinked {
					// The node is not yet fully linked, just waits until it is.
				}
				return false
			}
			// If the node is marked, represents some other thread is in the process of deleting this node,
			// we need to add this node in next loop.
			continue
		}

		// Add this node into skip list.
		var (
			highestLocked        = -1 // the highest level being locked by this process
			valid                = true
			pred, succ, prevPred *int32Node
		)
		for layer := 0; valid && layer < level; layer++ {
			pred = preds[layer]   // target node's previous node
			succ = succs[layer]   // target node's next node
			if pred != prevPred { // the node in this layer could be locked by previous loop
				pred.mu.Lock()
				highestLocked = layer
				prevPred = pred
			}
			// valid check if there is another node has inserted into the skip list in this layer during this process.
			// It is valid if:
			// 1. The previous node and next node both are not marked.
			// 2. The previous node's next node is succ in this layer.
			valid = !pred.marked && !succ.marked && pred.next[layer] == succ
		}
		if !valid {
			unlockInt32(preds, highestLocked)
			continue
		}

		nn := newInt32Node(score, level)
		for i := 0; i < level; i++ {
			nn.next[i] = succs[i]
			preds[i].next[i] = nn
		}
		nn.fullyLinked = true
		unlockInt32(preds, highestLocked)
		atomic.AddInt32(&s.length, 1)
		return true
	}
}

// Contains check if the score is in the skip set.
func (s *Int32Set) Contains(score int32) bool {
	x := s.header
	for i := maxLevel - 1; i >= 0; i-- {
		for x.next[i] != s.tail && x.next[i].score < score {
			x = x.next[i]
		}

		// Check if the score already in the skip list.
		if x.next[i] != s.tail && score == x.next[i].score {
			return x.next[i].fullyLinked && !x.next[i].marked
		}
	}
	return false
}

// Delete a node from the skip set.
func (s *Int32Set) Delete(score int32) bool {
	var (
		nodeToDelete *int32Node
		isMarked     bool // represents if this operation mark the node
		topLayer     = -1
		preds, succs [maxLevel]*int32Node
	)
	for {
		lFound := s.findNode(score, &preds, &succs)
		if isMarked || // this process mark this node or we can find this node in the skip list
			lFound != -1 && succs[lFound].fullyLinked && !succs[lFound].marked && (len(succs[lFound].next)-1) == lFound {
			if !isMarked { // we don't mark this node for now
				nodeToDelete = succs[lFound]
				topLayer = lFound
				nodeToDelete.mu.Lock()
				if nodeToDelete.marked {
					// The node is marked by another process,
					// the physical deletion will be accomplished by another process.
					nodeToDelete.mu.Unlock()
					return false
				}
				nodeToDelete.marked = true
				isMarked = true
			}
			// Accomplish the physical deletion.
			var (
				highestLocked        = -1 // the highest level being locked by this process
				valid                = true
				pred, succ, prevPred *int32Node
			)
			for layer := 0; valid && (layer <= topLayer); layer++ {
				pred, succ = preds[layer], succs[layer]
				if pred != prevPred { // the node in this layer could be locked by previous loop
					pred.mu.Lock()
					highestLocked = layer
					prevPred = pred
				}
				// valid check if there is another node has inserted into the skip list in this layer
				// during this process, or the previous is deleted by another process.
				// It is valid if:
				// 1. the previous node exists.
				// 2. no another node has inserted into the skip list in this layer.
				valid = !pred.marked && pred.next[layer] == succ
			}
			if !valid {
				unlockInt32(preds, highestLocked)
				continue
			}
			for i := topLayer; i >= 0; i-- {
				preds[i].next[i] = nodeToDelete.next[i]
			}
			nodeToDelete.mu.Unlock()
			unlockInt32(preds, highestLocked)
			atomic.AddInt32(&s.length, -1)
			return true
		}
		return false
	}
}

// Range calls f sequentially for each i and score present in the skip set.
// If f returns false, range stops the iteration.
func (s *Int32Set) Range(f func(i int, score int32) bool) {
	var (
		i int
		x = s.header.next[0]
	)
	for x != s.tail {
		if x.marked || !x.fullyLinked {
			continue
		}
		if !f(i, x.score) {
			break
		}
		x = x.next[0]
		i++
	}
}

// Len return the length of this skip set.
func (s *Int32Set) Len() int {
	return int(s.length)
}

type IntSet struct {
	header *intNode
	tail   *intNode
	length int64
}

type intNode struct {
	score       int
	next        []*intNode
	marked      bool
	fullyLinked bool
	mu          sync.Mutex
}

func newIntNode(score int, level int) *intNode {
	return &intNode{
		score:       score,
		next:        make([]*intNode, level),
		marked:      false,
		fullyLinked: true,
	}
}

// NewInt return a empty int skip set.
func NewInt() *IntSet {
	h, t := newIntNode(0, maxLevel), newIntNode(0, maxLevel)
	for i := 0; i < maxLevel; i++ {
		h.next[i] = t
	}
	return &IntSet{
		header: h,
		tail:   t,
	}
}

// findNode takes a score and two maximal-height arrays then searches exactly as in a sequential skip-list.
// The returned preds and succs always satisfy preds[i] > score > succs[i].
func (s *IntSet) findNode(score int, preds *[maxLevel]*intNode, succs *[maxLevel]*intNode) int {
	// lFound represents the index of the first layer at which it found a node.
	lFound, x := -1, s.header
	for i := maxLevel - 1; i >= 0; i-- {
		succ := x.next[i]
		for succ != s.tail && succ.score < score {
			x = succ
			succ = x.next[i]
		}
		preds[i] = x
		succs[i] = succ

		// Check if the score already in the skip list.
		if lFound == -1 && succ != s.tail && score == succ.score {
			lFound = i
		}
	}
	return lFound
}

// findNodeSimple takes a score and two maximal-height arrays then searches exactly as in a sequential skip-set.
// The returned preds and succs always satisfy preds[i] > score > succs[i].
func (s *IntSet) findNodeSimple(score int, preds *[maxLevel]*intNode, succs *[maxLevel]*intNode) int {
	// lFound represents the index of the first layer at which it found a node.
	x := s.header
	for i := maxLevel - 1; i >= 0; i-- {
		succ := x.next[i]
		for succ != s.tail && succ.score < score {
			x = succ
			succ = x.next[i]
		}
		preds[i] = x
		succs[i] = succ

		// Check if the score already in the skip list.
		if succ != s.tail && score == succ.score {
			return i
		}
	}
	return -1
}

func unlockInt(preds [maxLevel]*intNode, highestLevel int) {
	var prevPred *intNode
	for i := highestLevel; i >= 0; i-- {
		if preds[i] != prevPred { // the node could be unlocked by previous loop
			preds[i].mu.Unlock()
			prevPred = preds[i]
		}
	}
}

// Insert insert the score into skip set, return true if this process insert the score into skip set,
// return false if this process can't insert this score, because another process has insert the same score.
//
// If the score is in the skip set but not fully linked, this process will wait until it is.
func (s *IntSet) Insert(score int) bool {
	level := randomLevel()
	var preds, succs [maxLevel]*intNode
	for {
		lFound := s.findNodeSimple(score, &preds, &succs)
		if lFound != -1 { // indicating the score is already in the skip-list
			nodeFound := succs[lFound]
			if !nodeFound.marked {
				for !nodeFound.fullyLinked {
					// The node is not yet fully linked, just waits until it is.
				}
				return false
			}
			// If the node is marked, represents some other thread is in the process of deleting this node,
			// we need to add this node in next loop.
			continue
		}

		// Add this node into skip list.
		var (
			highestLocked        = -1 // the highest level being locked by this process
			valid                = true
			pred, succ, prevPred *intNode
		)
		for layer := 0; valid && layer < level; layer++ {
			pred = preds[layer]   // target node's previous node
			succ = succs[layer]   // target node's next node
			if pred != prevPred { // the node in this layer could be locked by previous loop
				pred.mu.Lock()
				highestLocked = layer
				prevPred = pred
			}
			// valid check if there is another node has inserted into the skip list in this layer during this process.
			// It is valid if:
			// 1. The previous node and next node both are not marked.
			// 2. The previous node's next node is succ in this layer.
			valid = !pred.marked && !succ.marked && pred.next[layer] == succ
		}
		if !valid {
			unlockInt(preds, highestLocked)
			continue
		}

		nn := newIntNode(score, level)
		for i := 0; i < level; i++ {
			nn.next[i] = succs[i]
			preds[i].next[i] = nn
		}
		nn.fullyLinked = true
		unlockInt(preds, highestLocked)
		atomic.AddInt64(&s.length, 1)
		return true
	}
}

// Contains check if the score is in the skip set.
func (s *IntSet) Contains(score int) bool {
	x := s.header
	for i := maxLevel - 1; i >= 0; i-- {
		for x.next[i] != s.tail && x.next[i].score < score {
			x = x.next[i]
		}

		// Check if the score already in the skip list.
		if x.next[i] != s.tail && score == x.next[i].score {
			return x.next[i].fullyLinked && !x.next[i].marked
		}
	}
	return false
}

// Delete a node from the skip set.
func (s *IntSet) Delete(score int) bool {
	var (
		nodeToDelete *intNode
		isMarked     bool // represents if this operation mark the node
		topLayer     = -1
		preds, succs [maxLevel]*intNode
	)
	for {
		lFound := s.findNode(score, &preds, &succs)
		if isMarked || // this process mark this node or we can find this node in the skip list
			lFound != -1 && succs[lFound].fullyLinked && !succs[lFound].marked && (len(succs[lFound].next)-1) == lFound {
			if !isMarked { // we don't mark this node for now
				nodeToDelete = succs[lFound]
				topLayer = lFound
				nodeToDelete.mu.Lock()
				if nodeToDelete.marked {
					// The node is marked by another process,
					// the physical deletion will be accomplished by another process.
					nodeToDelete.mu.Unlock()
					return false
				}
				nodeToDelete.marked = true
				isMarked = true
			}
			// Accomplish the physical deletion.
			var (
				highestLocked        = -1 // the highest level being locked by this process
				valid                = true
				pred, succ, prevPred *intNode
			)
			for layer := 0; valid && (layer <= topLayer); layer++ {
				pred, succ = preds[layer], succs[layer]
				if pred != prevPred { // the node in this layer could be locked by previous loop
					pred.mu.Lock()
					highestLocked = layer
					prevPred = pred
				}
				// valid check if there is another node has inserted into the skip list in this layer
				// during this process, or the previous is deleted by another process.
				// It is valid if:
				// 1. the previous node exists.
				// 2. no another node has inserted into the skip list in this layer.
				valid = !pred.marked && pred.next[layer] == succ
			}
			if !valid {
				unlockInt(preds, highestLocked)
				continue
			}
			for i := topLayer; i >= 0; i-- {
				preds[i].next[i] = nodeToDelete.next[i]
			}
			nodeToDelete.mu.Unlock()
			unlockInt(preds, highestLocked)
			atomic.AddInt64(&s.length, -1)
			return true
		}
		return false
	}
}

// Range calls f sequentially for each i and score present in the skip set.
// If f returns false, range stops the iteration.
func (s *IntSet) Range(f func(i int, score int) bool) {
	var (
		i int
		x = s.header.next[0]
	)
	for x != s.tail {
		if x.marked || !x.fullyLinked {
			continue
		}
		if !f(i, x.score) {
			break
		}
		x = x.next[0]
		i++
	}
}

// Len return the length of this skip set.
func (s *IntSet) Len() int {
	return int(s.length)
}
