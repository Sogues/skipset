// +build ignore

package main

import (
	"bytes"
	"go/format"
	"io/ioutil"
	"os"
	"reflect"
	"strings"
	"unsafe"
)

func StringToBytes(s string) (b []byte) {
	bh := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	sh := *(*reflect.StringHeader)(unsafe.Pointer(&s))
	bh.Data = sh.Data
	bh.Len = sh.Len
	bh.Cap = sh.Len
	return b
}

func BytesToString(b []byte) (s string) {
	return *(*string)(unsafe.Pointer(&b))
}

func main() {
	f, err := os.Open("skipset.go")
	if err != nil {
		panic(err)
	}
	byte, err := ioutil.ReadAll(f)
	if err != nil {
		panic(err)
	}

	w := new(bytes.Buffer)
	w.WriteString(`// Code generated by go run types_gen.go; DO NOT EDIT.` + "\r\n")
	w.WriteString(string(byte)[:strings.Index(string(byte), ")")+1])
	ts := []string{"Float32", "Float64", "Int32", "Int", "Uint32", "Uint64", "Uint"}
	for _, upper := range ts {
		lower := strings.ToLower(upper)
		data := string(byte)
		data = data[strings.Index(data, ")")+1:]
		data = strings.Replace(data, "int64", lower, -1)
		data = strings.Replace(data, "Int64", upper, -1)
		if strings.Index(lower, "float") == 0 || lower == "int" || lower == "uint" || lower == "uint32" || lower == "uint64" {
			data = strings.Replace(data, "length "+lower, "length int64", 1)
			data = strings.Replace(data, "atomic.Add"+upper, "atomic.AddInt64", -1)
		}
		w.WriteString(data)
		w.WriteString("\r\n")
	}

	out, err := format.Source(w.Bytes())
	if err != nil {
		panic(err)
	}
	if err := ioutil.WriteFile("types.go", out, 0660); err != nil {
		panic(err)
	}
}
